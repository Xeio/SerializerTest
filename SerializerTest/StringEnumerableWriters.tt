<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
	List<Type> Types = new List<Type>(){
		typeof(string), typeof(DateTime), typeof(Guid), typeof(DateTimeOffset)//, typeof(JsonEncodedText),
	};
#>
using System;
using System.Collections.Generic;
using System.Text.Json;

namespace SerializerTest
{
    public static class StringEnumerableWriters
    {
		public static readonly Dictionary<Type, Delegate> StringEnumerableDelegates = new Dictionary<Type, Delegate>()
		{
<# foreach (var type in Types) 
{ #>
			{ typeof(<#= type.Name #>), (Action<IEnumerable<<#= type.Name #>>, Utf8JsonWriter, JsonEncodedText?>)WriteEnumerable<#= type.Name #>},
<# } #>
			{ typeof(JsonEncodedText), (Action<IEnumerable<JsonEncodedText>, Utf8JsonWriter, JsonEncodedText?>)WriteEnumerableJsonEncodedText},
		};

<# foreach (var type in Types) 
{ #>
		public static void WriteEnumerable<#= type.Name #>(IEnumerable<<#= type.Name #>> values, Utf8JsonWriter writer, JsonEncodedText? name)
		{
			if (name == null)
			{
				writer.WriteStartArray();
			}
			else
			{
				writer.WriteStartArray((JsonEncodedText)name);
			}
            foreach (var val in values)
            {
                writer.WriteStringValue(val);
            }
            writer.WriteEndArray();
		}

<# } #>

		public static void WriteEnumerableJsonEncodedText(IEnumerable<JsonEncodedText> values, Utf8JsonWriter writer, JsonEncodedText? name)
		{
			if (name == null)
			{
				writer.WriteStartArray();
			}
			else
			{
				writer.WriteStartArray((JsonEncodedText)name);
			}
            foreach (var val in values)
            {
                writer.WriteStringValue(val);
            }
            writer.WriteEndArray();
		}
	}
}