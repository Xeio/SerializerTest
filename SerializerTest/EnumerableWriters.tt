<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
	var TypesToGenerate = new List<(Type type, string methodName)>(){
		(typeof(decimal), "WriteNumberValue"),
		(typeof(double), "WriteNumberValue"),
		(typeof(float), "WriteNumberValue"),
		(typeof(int), "WriteNumberValue"),
		(typeof(long), "WriteNumberValue"),
		(typeof(uint), "WriteNumberValue"),
		(typeof(ulong), "WriteNumberValue"),
		(typeof(short), "WriteNumberValue"),
		(typeof(ushort), "WriteNumberValue"),
		(typeof(sbyte), "WriteNumberValue"),

		(typeof(string), "WriteStringValue"),
		(typeof(DateTime), "WriteStringValue"),
		(typeof(Guid), "WriteStringValue"),
		(typeof(DateTimeOffset), "WriteStringValue"),
		//(typeof(JsonEncodedText), "WriteStringValue"),

		(typeof(bool), "WriteBooleanValue"),
	};

	var InterfaceNames = new List<string>()
	{
		"IEnumerable", "IList"
	};
#>
using System;
using System.Collections.Generic;
using System.Text.Json;

namespace SerializerTest
{
    public static class EnumerableWriters
    {
		public static readonly Dictionary<Type, Delegate> EnumerableDelegates = new Dictionary<Type, Delegate>()
		{
<#
foreach (var interfaceName in InterfaceNames)
foreach (var typeToGenerate in TypesToGenerate) 
{ #>
			{ typeof(<#= interfaceName #><<#= typeToGenerate.type.Name #>>), (Action<<#= interfaceName #><<#= typeToGenerate.type.Name #>>, Utf8JsonWriter, JsonEncodedText>)Write<#= interfaceName #><#= typeToGenerate.type.Name #>},
<# } #>
		};

		public static readonly Dictionary<Type, Delegate> EnumerableDelegatesNoName = new Dictionary<Type, Delegate>()
		{
<#
foreach (var interfaceName in InterfaceNames)
foreach (var typeToGenerate in TypesToGenerate) 
{ #>
			{ typeof(<#= interfaceName #><<#= typeToGenerate.type.Name #>>), (Action<<#= interfaceName #><<#= typeToGenerate.type.Name #>>, Utf8JsonWriter>)WriteNoName<#= interfaceName #><#= typeToGenerate.type.Name #>},
<# } #>
		};
<# 
foreach (var interfaceName in InterfaceNames)
foreach (var typeToGenerate in TypesToGenerate) 
{ #>
		public static void Write<#= interfaceName #><#= typeToGenerate.type.Name #>(<#= interfaceName #><<#= typeToGenerate.type.Name #>> values, Utf8JsonWriter writer, JsonEncodedText name)
		{
			writer.WriteStartArray(name);
            foreach (var val in values)
            {
                writer.<#= typeToGenerate.methodName #>(val);
            }
            writer.WriteEndArray();
		}

		public static void WriteNoName<#= interfaceName #><#= typeToGenerate.type.Name #>(<#= interfaceName #><<#= typeToGenerate.type.Name #>> values, Utf8JsonWriter writer)
		{
			writer.WriteStartArray();
            foreach (var val in values)
            {
                writer.<#= typeToGenerate.methodName #>(val);
            }
            writer.WriteEndArray();
		}

<# } #>
	}
}